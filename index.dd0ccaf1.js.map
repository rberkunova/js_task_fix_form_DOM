{"mappings":"ACEc,SAAS,gBAAgB,CAAC,QAElC,OAAO,CAAC,SAAC,CAAf,EAGE,AAFe,EAAK,gBAAgB,CAAC,SAE9B,OAAO,CAAC,SAAC,CAAhB,EASW,IAAA,EAAT,SAAyB,CAAG,EAC1B,OAAO,EACJ,OAAO,CAAC,kBAAmB,SAC3B,OAAO,CAAC,SAAU,SAAC,CAFtB,EAEgC,OAAA,EAAM,WAAW,E,EACnD,EAZM,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,SAAS,CAAC,GAAG,CAAC,eAEpB,IAAM,EAAU,EAAM,EAAE,EAAI,EAAM,IAAI,CAEtC,EAAM,YAAY,CAAC,MAAO,GAQ1B,IAAM,EAAiB,EAAM,IAAI,AAEjC,CAAA,EAAM,WAAW,CAAG,EACf,GAAkC,MAAA,CAAhC,EAAgB,IACnB,gBAEJ,EAAM,UAAU,CAAC,YAAY,CAAC,EAAO,GAErC,IAAM,EAAkB,EACpB,EAAgB,GAChB,EAEJ,CAAA,EAAM,WAAW,CAAG,CACtB,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar forms = document.querySelectorAll(\"form\");\nforms.forEach(function(form) {\n    var inputs = form.querySelectorAll(\"input\");\n    inputs.forEach(function(input) {\n        var formatLabelName = function formatLabelName(str) {\n            return str.replace(/([a-z])([A-Z])/g, \"$1 $2\").replace(/^[a-z]/, function(match) {\n                return match.toUpperCase();\n            });\n        };\n        var label = document.createElement(\"label\");\n        label.classList.add(\"field-label\");\n        var inputId = input.id || input.name;\n        label.setAttribute(\"for\", inputId);\n        var inputFieldName = input.name;\n        label.textContent = inputFieldName ? \"\".concat(formatLabelName(inputFieldName)) : \"Unnamed input\";\n        input.parentNode.insertBefore(label, input);\n        var placeholderText = inputFieldName ? formatLabelName(inputFieldName) : \"\";\n        input.placeholder = placeholderText;\n    });\n});\n\n//# sourceMappingURL=index.dd0ccaf1.js.map\n","'use strict';\n\nconst forms = document.querySelectorAll('form');\n\nforms.forEach((form) => {\n  const inputs = form.querySelectorAll('input');\n\n  inputs.forEach((input) => {\n    const label = document.createElement('label');\n\n    label.classList.add('field-label');\n\n    const inputId = input.id || input.name;\n\n    label.setAttribute('for', inputId);\n\n    function formatLabelName(str) {\n      return str\n        .replace(/([a-z])([A-Z])/g, '$1 $2')\n        .replace(/^[a-z]/, (match) => match.toUpperCase());\n    }\n\n    const inputFieldName = input.name;\n\n    label.textContent = inputFieldName\n      ? `${formatLabelName(inputFieldName)}`\n      : 'Unnamed input';\n\n    input.parentNode.insertBefore(label, input);\n\n    const placeholderText = inputFieldName\n      ? formatLabelName(inputFieldName)\n      : '';\n\n    input.placeholder = placeholderText;\n  });\n});\n"],"names":["document","querySelectorAll","forEach","form","inputs","input","formatLabelName","str","replace","match","toUpperCase","label","createElement","classList","add","inputId","id","name","setAttribute","inputFieldName","textContent","concat","parentNode","insertBefore","placeholderText","placeholder"],"version":3,"file":"index.dd0ccaf1.js.map"}